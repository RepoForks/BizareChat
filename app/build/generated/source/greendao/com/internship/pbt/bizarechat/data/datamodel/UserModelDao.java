package com.internship.pbt.bizarechat.data.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, long.class, "dbId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "user_id");
        public final static Property FullName = new Property(2, String.class, "fullName", false, "full_name");
        public final static Property Email = new Property(3, String.class, "email", false, "email");
        public final static Property Login = new Property(4, String.class, "login", false, "login");
        public final static Property Phone = new Property(5, String.class, "phone", false, "phone");
        public final static Property Website = new Property(6, String.class, "website", false, "website");
        public final static Property CreatedAt = new Property(7, String.class, "createdAt", false, "created_at");
        public final static Property UpdatedAt = new Property(8, String.class, "updatedAt", false, "updated_at");
        public final static Property LastRequestAt = new Property(9, String.class, "lastRequestAt", false, "last_request_at");
        public final static Property ExternalUserId = new Property(10, Integer.class, "externalUserId", false, "external_user_id");
        public final static Property FacebookId = new Property(11, Long.class, "facebookId", false, "facebook_id");
        public final static Property TwitterId = new Property(12, String.class, "twitterId", false, "twitter_id");
        public final static Property TwitterDigitsId = new Property(13, Integer.class, "twitterDigitsId", false, "twitter_digits_id");
        public final static Property BlobId = new Property(14, Integer.class, "blobId", false, "blob_id");
        public final static Property CustomData = new Property(15, String.class, "customData", false, "custom_data");
        public final static Property UserTags = new Property(16, String.class, "userTags", false, "user_tags");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: dbId
                "\"user_id\" INTEGER," + // 1: userId
                "\"full_name\" TEXT," + // 2: fullName
                "\"email\" TEXT," + // 3: email
                "\"login\" TEXT," + // 4: login
                "\"phone\" TEXT," + // 5: phone
                "\"website\" TEXT," + // 6: website
                "\"created_at\" TEXT," + // 7: createdAt
                "\"updated_at\" TEXT," + // 8: updatedAt
                "\"last_request_at\" TEXT," + // 9: lastRequestAt
                "\"external_user_id\" INTEGER," + // 10: externalUserId
                "\"facebook_id\" INTEGER," + // 11: facebookId
                "\"twitter_id\" TEXT," + // 12: twitterId
                "\"twitter_digits_id\" INTEGER," + // 13: twitterDigitsId
                "\"blob_id\" INTEGER," + // 14: blobId
                "\"custom_data\" TEXT," + // 15: customData
                "\"user_tags\" TEXT);"); // 16: userTags
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(3, fullName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(5, login);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(7, website);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(8, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(9, updatedAt);
        }
 
        String lastRequestAt = entity.getLastRequestAt();
        if (lastRequestAt != null) {
            stmt.bindString(10, lastRequestAt);
        }
 
        Integer externalUserId = entity.getExternalUserId();
        if (externalUserId != null) {
            stmt.bindLong(11, externalUserId);
        }
 
        Long facebookId = entity.getFacebookId();
        if (facebookId != null) {
            stmt.bindLong(12, facebookId);
        }
 
        String twitterId = entity.getTwitterId();
        if (twitterId != null) {
            stmt.bindString(13, twitterId);
        }
 
        Integer twitterDigitsId = entity.getTwitterDigitsId();
        if (twitterDigitsId != null) {
            stmt.bindLong(14, twitterDigitsId);
        }
 
        Integer blobId = entity.getBlobId();
        if (blobId != null) {
            stmt.bindLong(15, blobId);
        }
 
        String customData = entity.getCustomData();
        if (customData != null) {
            stmt.bindString(16, customData);
        }
 
        String userTags = entity.getUserTags();
        if (userTags != null) {
            stmt.bindString(17, userTags);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(3, fullName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(5, login);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(7, website);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(8, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(9, updatedAt);
        }
 
        String lastRequestAt = entity.getLastRequestAt();
        if (lastRequestAt != null) {
            stmt.bindString(10, lastRequestAt);
        }
 
        Integer externalUserId = entity.getExternalUserId();
        if (externalUserId != null) {
            stmt.bindLong(11, externalUserId);
        }
 
        Long facebookId = entity.getFacebookId();
        if (facebookId != null) {
            stmt.bindLong(12, facebookId);
        }
 
        String twitterId = entity.getTwitterId();
        if (twitterId != null) {
            stmt.bindString(13, twitterId);
        }
 
        Integer twitterDigitsId = entity.getTwitterDigitsId();
        if (twitterDigitsId != null) {
            stmt.bindLong(14, twitterDigitsId);
        }
 
        Integer blobId = entity.getBlobId();
        if (blobId != null) {
            stmt.bindLong(15, blobId);
        }
 
        String customData = entity.getCustomData();
        if (customData != null) {
            stmt.bindString(16, customData);
        }
 
        String userTags = entity.getUserTags();
        if (userTags != null) {
            stmt.bindString(17, userTags);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // login
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // website
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdAt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updatedAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastRequestAt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // externalUserId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // facebookId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // twitterId
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // twitterDigitsId
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // blobId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // customData
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // userTags
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setDbId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFullName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWebsite(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdatedAt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastRequestAt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExternalUserId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFacebookId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setTwitterId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTwitterDigitsId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setBlobId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCustomData(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserTags(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
