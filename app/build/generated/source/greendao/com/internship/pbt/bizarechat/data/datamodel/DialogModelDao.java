package com.internship.pbt.bizarechat.data.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.internship.pbt.bizarechat.data.datamodel.DialogModel.OccupantsIdsConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Dialog".
*/
public class DialogModelDao extends AbstractDao<DialogModel, String> {

    public static final String TABLENAME = "Dialog";

    /**
     * Properties of entity DialogModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DialogId = new Property(0, String.class, "dialogId", true, "dialog_id");
        public final static Property CreatedAt = new Property(1, String.class, "createdAt", false, "created_at");
        public final static Property UpdatedAt = new Property(2, String.class, "updatedAt", false, "updated_at");
        public final static Property LastMessage = new Property(3, String.class, "lastMessage", false, "last_message");
        public final static Property LastMessageDateSent = new Property(4, long.class, "lastMessageDateSent", false, "last_message_date_sent");
        public final static Property LastMessageUserId = new Property(5, int.class, "lastMessageUserId", false, "last_message_user_id");
        public final static Property Name = new Property(6, String.class, "name", false, "name");
        public final static Property Photo = new Property(7, String.class, "photo", false, "photo");
        public final static Property OccupantsIds = new Property(8, String.class, "occupantsIds", false, "occupants_ids");
        public final static Property Type = new Property(9, Integer.class, "type", false, "type");
        public final static Property UnreadMessagesCount = new Property(10, Integer.class, "unreadMessagesCount", false, "unread_messages_count");
        public final static Property XmppRoomJid = new Property(11, String.class, "xmppRoomJid", false, "xmpp_room_jid");
    }

    private final OccupantsIdsConverter occupantsIdsConverter = new OccupantsIdsConverter();

    public DialogModelDao(DaoConfig config) {
        super(config);
    }
    
    public DialogModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Dialog\" (" + //
                "\"dialog_id\" TEXT PRIMARY KEY NOT NULL ," + // 0: dialogId
                "\"created_at\" TEXT," + // 1: createdAt
                "\"updated_at\" TEXT," + // 2: updatedAt
                "\"last_message\" TEXT," + // 3: lastMessage
                "\"last_message_date_sent\" INTEGER NOT NULL ," + // 4: lastMessageDateSent
                "\"last_message_user_id\" INTEGER NOT NULL ," + // 5: lastMessageUserId
                "\"name\" TEXT," + // 6: name
                "\"photo\" TEXT," + // 7: photo
                "\"occupants_ids\" TEXT," + // 8: occupantsIds
                "\"type\" INTEGER," + // 9: type
                "\"unread_messages_count\" INTEGER," + // 10: unreadMessagesCount
                "\"xmpp_room_jid\" TEXT);"); // 11: xmppRoomJid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Dialog\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DialogModel entity) {
        stmt.clearBindings();
 
        String dialogId = entity.getDialogId();
        if (dialogId != null) {
            stmt.bindString(1, dialogId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(3, updatedAt);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(4, lastMessage);
        }
        stmt.bindLong(5, entity.getLastMessageDateSent());
        stmt.bindLong(6, entity.getLastMessageUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        List occupantsIds = entity.getOccupantsIds();
        if (occupantsIds != null) {
            stmt.bindString(9, occupantsIdsConverter.convertToDatabaseValue(occupantsIds));
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        Integer unreadMessagesCount = entity.getUnreadMessagesCount();
        if (unreadMessagesCount != null) {
            stmt.bindLong(11, unreadMessagesCount);
        }
 
        String xmppRoomJid = entity.getXmppRoomJid();
        if (xmppRoomJid != null) {
            stmt.bindString(12, xmppRoomJid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DialogModel entity) {
        stmt.clearBindings();
 
        String dialogId = entity.getDialogId();
        if (dialogId != null) {
            stmt.bindString(1, dialogId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(2, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(3, updatedAt);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(4, lastMessage);
        }
        stmt.bindLong(5, entity.getLastMessageDateSent());
        stmt.bindLong(6, entity.getLastMessageUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        List occupantsIds = entity.getOccupantsIds();
        if (occupantsIds != null) {
            stmt.bindString(9, occupantsIdsConverter.convertToDatabaseValue(occupantsIds));
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        Integer unreadMessagesCount = entity.getUnreadMessagesCount();
        if (unreadMessagesCount != null) {
            stmt.bindLong(11, unreadMessagesCount);
        }
 
        String xmppRoomJid = entity.getXmppRoomJid();
        if (xmppRoomJid != null) {
            stmt.bindString(12, xmppRoomJid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DialogModel readEntity(Cursor cursor, int offset) {
        DialogModel entity = new DialogModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dialogId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastMessage
            cursor.getLong(offset + 4), // lastMessageDateSent
            cursor.getInt(offset + 5), // lastMessageUserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photo
            cursor.isNull(offset + 8) ? null : occupantsIdsConverter.convertToEntityProperty(cursor.getString(offset + 8)), // occupantsIds
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // unreadMessagesCount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // xmppRoomJid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DialogModel entity, int offset) {
        entity.setDialogId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastMessageDateSent(cursor.getLong(offset + 4));
        entity.setLastMessageUserId(cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOccupantsIds(cursor.isNull(offset + 8) ? null : occupantsIdsConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUnreadMessagesCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setXmppRoomJid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DialogModel entity, long rowId) {
        return entity.getDialogId();
    }
    
    @Override
    public String getKey(DialogModel entity) {
        if(entity != null) {
            return entity.getDialogId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DialogModel entity) {
        return entity.getDialogId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
