package com.internship.pbt.bizarechat.data.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.internship.pbt.bizarechat.data.datamodel.MessageModel.AttachmentsConverter;
import com.internship.pbt.bizarechat.data.datamodel.MessageModel.OccupantsIdsConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Message".
*/
public class MessageModelDao extends AbstractDao<MessageModel, Long> {

    public static final String TABLENAME = "Message";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, long.class, "dbId", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "message_id");
        public final static Property CreatedAt = new Property(2, String.class, "createdAt", false, "created_at");
        public final static Property UpdatedAt = new Property(3, String.class, "updatedAt", false, "updated_at");
        public final static Property Attachments = new Property(4, String.class, "attachments", false, "attachments");
        public final static Property ReadIds = new Property(5, String.class, "readIds", false, "read_ids");
        public final static Property DeliveredIds = new Property(6, String.class, "deliveredIds", false, "delivered_ids");
        public final static Property ChatDialogId = new Property(7, String.class, "chatDialogId", false, "chat_dialog_id");
        public final static Property DateSent = new Property(8, long.class, "dateSent", false, "date_sent");
        public final static Property Message = new Property(9, String.class, "message", false, "message");
        public final static Property RecipientId = new Property(10, Integer.class, "recipientId", false, "recipient_id");
        public final static Property SenderId = new Property(11, Integer.class, "senderId", false, "sender_id");
        public final static Property Read = new Property(12, Integer.class, "read", false, "read");
    }

    private final AttachmentsConverter attachmentsConverter = new AttachmentsConverter();
    private final OccupantsIdsConverter readIdsConverter = new OccupantsIdsConverter();
    private final OccupantsIdsConverter deliveredIdsConverter = new OccupantsIdsConverter();

    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Message\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: dbId
                "\"message_id\" TEXT," + // 1: messageId
                "\"created_at\" TEXT," + // 2: createdAt
                "\"updated_at\" TEXT," + // 3: updatedAt
                "\"attachments\" TEXT," + // 4: attachments
                "\"read_ids\" TEXT," + // 5: readIds
                "\"delivered_ids\" TEXT," + // 6: deliveredIds
                "\"chat_dialog_id\" TEXT," + // 7: chatDialogId
                "\"date_sent\" INTEGER NOT NULL ," + // 8: dateSent
                "\"message\" TEXT," + // 9: message
                "\"recipient_id\" INTEGER," + // 10: recipientId
                "\"sender_id\" INTEGER," + // 11: senderId
                "\"read\" INTEGER);"); // 12: read
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(3, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(4, updatedAt);
        }
 
        List attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(5, attachmentsConverter.convertToDatabaseValue(attachments));
        }
 
        List readIds = entity.getReadIds();
        if (readIds != null) {
            stmt.bindString(6, readIdsConverter.convertToDatabaseValue(readIds));
        }
 
        List deliveredIds = entity.getDeliveredIds();
        if (deliveredIds != null) {
            stmt.bindString(7, deliveredIdsConverter.convertToDatabaseValue(deliveredIds));
        }
 
        String chatDialogId = entity.getChatDialogId();
        if (chatDialogId != null) {
            stmt.bindString(8, chatDialogId);
        }
        stmt.bindLong(9, entity.getDateSent());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        Integer recipientId = entity.getRecipientId();
        if (recipientId != null) {
            stmt.bindLong(11, recipientId);
        }
 
        Integer senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindLong(12, senderId);
        }
 
        Integer read = entity.getRead();
        if (read != null) {
            stmt.bindLong(13, read);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(3, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(4, updatedAt);
        }
 
        List attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(5, attachmentsConverter.convertToDatabaseValue(attachments));
        }
 
        List readIds = entity.getReadIds();
        if (readIds != null) {
            stmt.bindString(6, readIdsConverter.convertToDatabaseValue(readIds));
        }
 
        List deliveredIds = entity.getDeliveredIds();
        if (deliveredIds != null) {
            stmt.bindString(7, deliveredIdsConverter.convertToDatabaseValue(deliveredIds));
        }
 
        String chatDialogId = entity.getChatDialogId();
        if (chatDialogId != null) {
            stmt.bindString(8, chatDialogId);
        }
        stmt.bindLong(9, entity.getDateSent());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        Integer recipientId = entity.getRecipientId();
        if (recipientId != null) {
            stmt.bindLong(11, recipientId);
        }
 
        Integer senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindLong(12, senderId);
        }
 
        Integer read = entity.getRead();
        if (read != null) {
            stmt.bindLong(13, read);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createdAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // updatedAt
            cursor.isNull(offset + 4) ? null : attachmentsConverter.convertToEntityProperty(cursor.getString(offset + 4)), // attachments
            cursor.isNull(offset + 5) ? null : readIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)), // readIds
            cursor.isNull(offset + 6) ? null : deliveredIdsConverter.convertToEntityProperty(cursor.getString(offset + 6)), // deliveredIds
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chatDialogId
            cursor.getLong(offset + 8), // dateSent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // message
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // recipientId
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // senderId
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setDbId(cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdatedAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttachments(cursor.isNull(offset + 4) ? null : attachmentsConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setReadIds(cursor.isNull(offset + 5) ? null : readIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setDeliveredIds(cursor.isNull(offset + 6) ? null : deliveredIdsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setChatDialogId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateSent(cursor.getLong(offset + 8));
        entity.setMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecipientId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSenderId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setRead(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageModel entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
